{"uid":"6e0eb49a6c6eb6b7","name":"test_reg","fullName":"test_conduit.test_conduit.TestConduit#test_reg","historyId":"f35db28ea94aea392646964ec0672cb8","time":{"start":1656407922674,"stop":1656407926898,"duration":4224},"status":"failed","statusMessage":"AssertionError: assert 'Welcome!' == 'Registration failed!'\n  - Registration failed!\n  + Welcome!","statusTrace":"self = <test_conduit.TestConduit object at 0x7f5b1e8a3bb0>\n\n    def test_reg(self):\n        # creating future user\n        registration(self.browser, sample_user[\"name\"], sample_user[\"email\"], sample_user[\"password\"])\n        signup_btn = self.browser.find_element_by_xpath('//a[@href=\"#/register\"]')\n        signup_btn.click()\n        username_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Username\"]')\n        email_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Email\"]')\n        password_input = self.browser.find_element_by_xpath('//input[@type=\"password\"]')\n        signup_btn = self.browser.find_element_by_css_selector('button[class=\"btn btn-lg btn-primary pull-xs-right\"]')\n        username_input.send_keys('teszt')\n        email_input.send_keys('teszt')\n        password_input.send_keys('teszt')\n        time.sleep(1)\n        signup_btn.click()\n        time.sleep(1)\n        reg_fail = self.browser.find_element_by_xpath('//div[@class=\"swal-title\"]')\n        reg_invalid_email = self.browser.find_element_by_xpath('//div[@class=\"swal-text\"]')\n>       assert reg_fail.text == \"Registration failed!\"\nE       AssertionError: assert 'Welcome!' == 'Registration failed!'\nE         - Registration failed!\nE         + Welcome!\n\ntest_conduit/test_conduit.py:43: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1656407916653,"stop":1656407922671,"duration":6018},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 'Welcome!' == 'Registration failed!'\n  - Registration failed!\n  + Welcome!","statusTrace":"self = <test_conduit.TestConduit object at 0x7f5b1e8a3bb0>\n\n    def test_reg(self):\n        # creating future user\n        registration(self.browser, sample_user[\"name\"], sample_user[\"email\"], sample_user[\"password\"])\n        signup_btn = self.browser.find_element_by_xpath('//a[@href=\"#/register\"]')\n        signup_btn.click()\n        username_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Username\"]')\n        email_input = self.browser.find_element_by_xpath('//input[@placeholder=\"Email\"]')\n        password_input = self.browser.find_element_by_xpath('//input[@type=\"password\"]')\n        signup_btn = self.browser.find_element_by_css_selector('button[class=\"btn btn-lg btn-primary pull-xs-right\"]')\n        username_input.send_keys('teszt')\n        email_input.send_keys('teszt')\n        password_input.send_keys('teszt')\n        time.sleep(1)\n        signup_btn.click()\n        time.sleep(1)\n        reg_fail = self.browser.find_element_by_xpath('//div[@class=\"swal-title\"]')\n        reg_invalid_email = self.browser.find_element_by_xpath('//div[@class=\"swal-text\"]')\n>       assert reg_fail.text == \"Registration failed!\"\nE       AssertionError: assert 'Welcome!' == 'Registration failed!'\nE         - Registration failed!\nE         + Welcome!\n\ntest_conduit/test_conduit.py:43: AssertionError","steps":[],"attachments":[{"uid":"7d069aa52f2a7d33","name":"log","source":"7d069aa52f2a7d33.txt","type":"text/plain","size":570},{"uid":"4ae7181780e4b942","name":"stdout","source":"4ae7181780e4b942.txt","type":"text/plain","size":1},{"uid":"8f9730b757ccd7b","name":"stderr","source":"8f9730b757ccd7b.txt","type":"text/plain","size":463}],"parameters":[],"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1656407926948,"stop":1656407927002,"duration":54},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"test_conduit"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az127-166"},{"name":"thread","value":"3107-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_conduit.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f39ed0525749bbc6","status":"passed","time":{"start":1656248631560,"stop":1656248634101,"duration":2541}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"6e0eb49a6c6eb6b7.json","parameterValues":[]}